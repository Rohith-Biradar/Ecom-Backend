# ----------------------------------------------------
# APPLICATION & DATABASE CONFIGURATION
# ----------------------------------------------------
# This is the name of your application, for logging purposes.
spring.application.name=ecomproject

# The following properties get their values from environment variables set on the deployment platform (e.g., Render).
# This is a standard and secure practice for production environments.
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# ----------------------------------------------------
# JPA & HIBERNATE CONFIGURATION
# ----------------------------------------------------
# 'update' is a good setting for development, as it updates the schema to match your entities.
# For production, consider using 'validate' or a dedicated migration tool like Flyway or Liquibase.
spring.jpa.hibernate.ddl-auto=update

# A dialect is a way of mapping a programming language to a specific database.
# This ensures that Hibernate generates SQL that is specific to PostgreSQL.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Set this to 'false' in production to avoid cluttering your logs with SQL statements.
spring.jpa.show-sql=false

# ----------------------------------------------------
# MULTIPART (FILE UPLOAD) CONFIGURATION
# ----------------------------------------------------
# These settings configure Spring to handle file uploads.
# The limits are set in megabytes (MB) and are crucial for preventing large, malicious uploads.
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=55MB
server.tomcat.max-part-count=30

# ----------------------------------------------------
# HIKARICP CONNECTION POOL CONFIGURATION
# ----------------------------------------------------
# HikariCP is the default database connection pool in Spring Boot.
# The `auto-commit=false` setting requires you to explicitly manage transactions with @Transactional annotations.
spring.datasource.hikari.auto-commit=false
spring.datasource.hikari.maximum-pool-size=10
